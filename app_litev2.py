# -*- coding: utf-8 -*-
import cv2, time, json, threading
from flask import Flask, Response, send_from_directory
from flask_sock import Sock
import RPi.GPIO as GPIO
# =============================
# ‚öôÔ∏è C·∫§U H√åNH C∆† B·∫¢N
# =============================
CAMERA_INDEX = 0
ACTIVE_LOW = True
CYCLE_DELAY = 0.3       # Th·ªùi gian ƒë·∫©y
SETTLE_DELAY = 0.2      # Th·ªùi gian ch·ªù
DEBOUNCE = 0.1          # Ch·ªëng nhi·ªÖu sensor
PUSH_DELAY = 0.2         # Th·ªùi gian tr·ªÖ tr∆∞·ªõc khi piston ho·∫°t ƒë·ªông
QUEUE_TIMEOUT = 10.0     # Timeout h√†ng ch·ªù
main_running = True

# --- Khai b√°o 4 l√†n ---
LANES = [
    {"id": "A", "name": "Lo·∫°i A", "sensor": 3,  "pull": 18, "push": 17},
    {"id": "B", "name": "Lo·∫°i B", "sensor": 23, "pull": 14, "push": 27},
    {"id": "C", "name": "Lo·∫°i C", "sensor": 24, "pull": 4,  "push": 22},
    {"id": "D", "name": "Lo·∫°i D (ƒë·∫øm)", "sensor": None, "pull": None, "push": None},
]

# =============================
# üîå KH·ªûI T·∫†O GPIO
# =============================
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
for lane in LANES:
    if lane["push"]: GPIO.setup(lane["push"], GPIO.OUT)
    if lane["pull"]: GPIO.setup(lane["pull"], GPIO.OUT)
    if lane["sensor"]: GPIO.setup(lane["sensor"], GPIO.IN, pull_up_down=GPIO.PUD_UP)

# ƒê·ªãnh nghƒ©a nhanh hai h√†m b·∫≠t/t·∫Øt relay
on  = lambda p: GPIO.output(p, GPIO.LOW if ACTIVE_LOW else GPIO.HIGH)
off = lambda p: GPIO.output(p, GPIO.HIGH if ACTIVE_LOW else GPIO.LOW)

def reset_relays():
    """ƒê∆∞a t·∫•t c·∫£ relay v·ªÅ tr·∫°ng th√°i an to√†n (THU b·∫≠t, ƒê·∫®Y t·∫Øt)."""
    for lane in LANES:
        if lane["pull"]: on(lane["pull"])
        if lane["push"]: off(lane["push"])
    print("[GPIO] ‚úÖ ƒê√£ reset t·∫•t c·∫£ relay v·ªÅ m·∫∑c ƒë·ªãnh.")

# =============================
# üß© TR·∫†NG TH√ÅI TO√ÄN C·ª§C
# =============================
queue, queue_lock = [], threading.Lock()   # H√†ng ch·ªù QR
latest_frame, frame_lock = None, threading.Lock()  # Khung h√¨nh camera
ws_clients, ws_lock = set(), threading.Lock()       # K·∫øt n·ªëi WebSocket
counts = [0]*len(LANES)                            # B·ªô ƒë·∫øm t·ª´ng l√†n

# =============================
# ü™∂ H√ÄM H·ªñ TR·ª¢
# =============================
def log(msg): print(f"[{time.strftime('%H:%M:%S')}] {msg}")

def broadcast(event):
    """G·ª≠i s·ª± ki·ªán (log/state_update) ƒë·∫øn t·∫•t c·∫£ client qua WS."""
    data = json.dumps(event)
    with ws_lock:
        for ws in list(ws_clients):
            try: ws.send(data)
            except: ws_clients.remove(ws)

# =============================
# üé• LU·ªíNG CAMERA
# =============================
def camera_thread():
    """ƒê·ªçc h√¨nh t·ª´ camera v√† l∆∞u v√†o bi·∫øn latest_frame."""
    global latest_frame
    cam = cv2.VideoCapture(CAMERA_INDEX)
    cam.set(3, 640); cam.set(4, 480)
    if not cam.isOpened():
        log("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c camera.")
        return
    while main_running:
        ok, frame = cam.read()
        if ok:
            with frame_lock: latest_frame = frame
        time.sleep(0.03)
    cam.release()

# =============================
# ü§ñ LU·ªíNG X·ª¨ L√ù CH√çNH (QR + SENSOR)
# =============================
def main_loop():
    """G·ªôp qu√©t QR + ƒë·ªçc c·∫£m bi·∫øn v√†o m·ªôt v√≤ng l·∫∑p ch√≠nh."""
    det = cv2.QRCodeDetector()
    last_qr, last_time = "", 0
    last_sensor = {}
    timeout_ref = time.time()

    while main_running:
        # --- ƒê·ªçc khung h√¨nh ---
        frame = None
        with frame_lock:
            if latest_frame is not None:
                frame = latest_frame.copy()
        if frame is None:
            time.sleep(0.05)
            continue

        # --- QU√âT QR ---
        data, _, _ = det.detectAndDecode(frame)
        if data and (data != last_qr or time.time() - last_time > 2):
            last_qr, last_time = data, time.time()
            qr = data.strip()
            found = next((i for i, l in enumerate(LANES) if l["id"] == qr), None)
            if found is not None:
                with queue_lock:
                    queue.append(found)
                log(f"üì¶ QR {qr} ‚Üí th√™m v√†o h√†ng ch·ªù {queue}")
                broadcast({"type": "log", "log_type": "qr", "message": f"Ph√°t hi·ªán {qr}", "data": {"queue": queue}})
            else:
                log(f"‚ö†Ô∏è M√£ QR kh√¥ng h·ª£p l·ªá: {qr}")

        # --- TIMEOUT H√ÄNG CH·ªú ---
        if queue and time.time() - timeout_ref > QUEUE_TIMEOUT:
            with queue_lock:
                dropped = queue.pop(0)
            log(f"‚è∞ B·ªè h√†ng ch·ªù {LANES[dropped]['id']} do timeout.")
            broadcast({"type": "log", "log_type": "warn", "message": f"H√†ng ch·ªù {LANES[dropped]['id']} h·∫øt h·∫°n.", "data": {"queue": queue}})
            timeout_ref = time.time()

        # --- ƒê·ªåC SENSOR ---
        for i, lane in enumerate(LANES):
            if not lane["sensor"]: continue
            val = GPIO.input(lane["sensor"])
            if val == 0 and last_sensor.get(i, 1) == 1:
                # C·∫£m bi·∫øn ph√°t hi·ªán v·∫≠t
                threading.Thread(target=sort_cycle, args=(i,), daemon=True).start()
                with queue_lock:
                    if queue and queue[0] == i:
                        queue.pop(0)
                    broadcast({"type": "log", "log_type": "sort", "message": f"Sensor {lane['id']} k√≠ch ho·∫°t", "data": {"queue": queue}})
                timeout_ref = time.time()
            last_sensor[i] = val

        time.sleep(0.02)

# =============================
# üîÅ CHU TR√åNH THU - ƒê·∫®Y
# =============================
def sort_cycle(i):
    """Th·ª±c thi 1 chu tr√¨nh thu - ƒë·∫©y c·ªßa l√†n i."""
    lane = LANES[i]
    log(f"üöÄ B·∫Øt ƒë·∫ßu {lane['name']} (delay {PUSH_DELAY}s)")
    time.sleep(PUSH_DELAY)  # ƒê·ªô tr·ªÖ tr∆∞·ªõc khi ch·∫°y piston

    # N·∫øu l√† lane ƒë·∫øm (D)
    if not lane["pull"] or not lane["push"]:
        counts[i] += 1
        log(f"üìä C·∫≠p nh·∫≠t ƒë·∫øm {lane['id']} = {counts[i]}")
        return

    # Chu tr√¨nh piston
    off(lane["pull"]); time.sleep(SETTLE_DELAY)
    on(lane["push"]);  time.sleep(CYCLE_DELAY)
    off(lane["push"]); time.sleep(SETTLE_DELAY)
    on(lane["pull"])

    counts[i] += 1
    log(f"‚úÖ Ho√†n t·∫•t {lane['id']} ‚Üí T·ªïng: {counts[i]}")

# =============================
# üåê FLASK + WEBSOCKET
# =============================
app = Flask(__name__, static_folder=".")
sock = Sock(app)

@app.route("/")
def index():
    """Tr·∫£ v·ªÅ giao di·ªán ƒëi·ªÅu khi·ªÉn (HTML ƒë·∫∑t c√πng th∆∞ m·ª•c)."""
    return send_from_directory(".", "index_lite.html")

@app.route("/video_feed")
def video_feed():
    """Lu·ªìng video MJPEG g·ª≠i cho tr√¨nh duy·ªát."""
    def gen():
        while main_running:
            frame = None
            with frame_lock:
                if latest_frame is not None:
                    frame = latest_frame.copy()
            if frame is None:
                time.sleep(0.1)
                continue
            ok, buf = cv2.imencode(".jpg", frame, [cv2.IMWRITE_JPEG_QUALITY, 70])
            if not ok: continue
            yield b"--frame\r\nContent-Type: image/jpeg\r\n\r\n" + buf.tobytes() + b"\r\n"
    return Response(gen(), mimetype="multipart/x-mixed-replace; boundary=frame")

@sock.route("/ws")
def ws(ws):
    """WebSocket g·ª≠i log & nh·∫≠n l·ªánh reset."""
    with ws_lock: ws_clients.add(ws)
    try:
        while True:
            msg = ws.receive()
            if not msg: break
            data = json.loads(msg)
            act = data.get("action")
            if act == "reset_count":
                for j in range(len(counts)): counts[j] = 0
                log("üßπ ƒê√£ reset to√†n b·ªô b·ªô ƒë·∫øm.")
                broadcast({"type": "log", "log_type": "info", "message": "ƒê√£ reset to√†n b·ªô ƒë·∫øm."})
            elif act == "reset_queue":
                with queue_lock: queue.clear()
                log("üßπ Reset h√†ng ch·ªù.")
                broadcast({"type": "log", "log_type": "warn", "message": "H√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c reset.", "data": {"queue": []}})
    finally:
        with ws_lock: ws_clients.discard(ws)

# =============================
# üèÅ MAIN
# =============================
if __name__ == "__main__":
    try:
        reset_relays()
        threading.Thread(target=camera_thread, daemon=True).start()
        threading.Thread(target=main_loop, daemon=True).start()
        log(f"üöÄ H·ªá th·ªëng ph√¢n lo·∫°i kh·ªüi ƒë·ªông (PUSH_DELAY = {PUSH_DELAY}s, 4 l√†n)")
        app.run(host="0.0.0.0", port=3000, debug=False, threaded=True)
    except KeyboardInterrupt:
        log("üõë D·ª´ng h·ªá th·ªëng (Ctrl+C).")
    finally:
        main_running = False
        GPIO.cleanup()
        print("‚úÖ GPIO ƒë√£ d·ªçn d·∫πp. T·∫°m bi·ªát!")
