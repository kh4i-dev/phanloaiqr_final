# -*- coding: utf-8 -*-
import cv2
import time
import json
import threading
import logging
import os
import functools
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, render_template, Response, jsonify, request
from flask_sock import Sock
# =============================
#        C·ªú ƒêI·ªÄU KHI·ªÇN H·ªÜ TH·ªêNG
# =============================
hot_reload_enabled = False  # üî• N·∫øu = True: B·∫≠t Hot Reload khi nh·∫•n "L∆∞u Config"
                           # üö´ N·∫øu = False: Ch·ªâ l∆∞u file, KH√îNG kh·ªüi ƒë·ªông l·∫°i camera/sensor

import unicodedata, re # (M·ªöI) Th√™m th∆∞ vi·ªán x·ª≠ l√Ω k√Ω t·ª± v√† regex

# =============================
#       C√ÅC H√ÄM TI·ªÜN √çCH CHU·∫®N HO√Å
# =============================
def _strip_accents(s: str) -> str:
    # B·ªè d·∫•u ti·∫øng Vi·ªát
    s = unicodedata.normalize("NFKD", s)
    return "".join(ch for ch in s if not unicodedata.combining(ch))

def canon_id(s: str) -> str:
    """
    Chu·∫©n ho√° ID/QR v·ªÅ d·∫°ng so kh·ªõp:
    - B·ªè d·∫•u, Uppercase
    - B·ªè prefix QR_/QR, LOAI/LO
    - B·ªè m·ªçi k√Ω t·ª± kh√¥ng ph·∫£i A-Z/0-9
    """
    if s is None:
        return ""
    s = str(s).strip()
    # Decode ki·ªÉu '\u1ea0' n·∫øu l·ª° truy·ªÅn v√†o d·∫°ng escaped
    try:
        s = s.encode("utf-8").decode("unicode_escape")
    except Exception:
        pass
        
    s = _strip_accents(s).upper()
    
    # B·ªè c√°c prefix ph·ªï bi·∫øn v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
    s = re.sub(r"\bQR_?\b", "", s)      # QR_ ho·∫∑c QR
    s = re.sub(r"[^A-Z0-9]", "", s)     # B·ªè m·ªçi k√Ω t·ª± kh√¥ng ph·∫£i A-Z/0-9
    
    # B·ªè ti·ªÅn t·ªë LOAI / LO ·ªü ƒê·∫¶U chu·ªói (v√≠ d·ª•: LOAI1 -> 1, LOAIB -> B)
    s = re.sub(r"^(LOAI|LO)+", "", s)
    
    return s

# =============================
#       L·ªöP TR·ª™U T∆Ø·ª¢NG GPIO
# =============================
try:
    # Th·ª≠ import th∆∞ vi·ªán th·∫≠t c·ªßa Pi
    import RPi.GPIO as RPiGPIO
except (ImportError, RuntimeError):
    # N·∫øu th·∫•t b·∫°i (ch·∫°y tr√™n Windows/Mac), d√πng None
    RPiGPIO = None

class GPIOProvider:
    """L·ªõp tr·ª´u t∆∞·ª£ng (Abstract Class) ƒë·ªÉ t∆∞∆°ng t√°c GPIO."""
    def setup(self, pin, mode, pull_up_down=None):
        raise NotImplementedError
    def output(self, pin, value):
        raise NotImplementedError
    def input(self, pin):
        raise NotImplementedError
    def cleanup(self):
        raise NotImplementedError
    def setmode(self, mode):
        raise NotImplementedError
    def setwarnings(self, value):
        raise NotImplementedError

class RealGPIO(GPIOProvider):
    """Tri·ªÉn khai GPIO th·∫≠t (ch·∫°y tr√™n Raspberry Pi)."""
    def __init__(self):
        if RPiGPIO is None:
            raise ImportError("Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán RPi.GPIO. B·∫°n ƒëang ch·∫°y tr√™n Pi?")
        self.gpio = RPiGPIO
        self.BOARD = self.gpio.BOARD
        self.BCM = self.gpio.BCM
        self.OUT = self.gpio.OUT
        self.IN = self.gpio.IN
        self.HIGH = self.gpio.HIGH
        self.LOW = self.gpio.LOW
        self.PUD_UP = self.gpio.PUD_UP

    def setmode(self, mode): self.gpio.setmode(mode)
    def setwarnings(self, value): self.gpio.setwarnings(value)
    def setup(self, pin, mode, pull_up_down=None):
        # Ch·ªâ setup n·∫øu pin kh√¥ng ph·∫£i l√† None
        if pin is not None:
            if pull_up_down:
                self.gpio.setup(pin, mode, pull_up_down=pull_up_down)
            else:
                self.gpio.setup(pin, mode)
    def output(self, pin, value): 
        if pin is not None:
            self.gpio.output(pin, value)
    def input(self, pin): 
        if pin is not None:
            return self.gpio.input(pin)
        return self.gpio.HIGH # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ HIGH n·∫øu pin l√† None
    def cleanup(self): self.gpio.cleanup()

class MockGPIO(GPIOProvider):
    """Tri·ªÉn khai GPIO gi·∫£ l·∫≠p (Mock) ƒë·ªÉ test tr√™n PC."""
    def __init__(self):
        self.BOARD = "mock_BOARD"
        self.BCM = "mock_BCM"
        self.OUT = "mock_OUT"
        self.IN = "mock_IN"
        self.HIGH = 1
        self.LOW = 0
        self.input_pins = set()
        self.PUD_UP = "mock_PUD_UP"
        self.pin_states = {} # Gi·∫£ l·∫≠p tr·∫°ng th√°i pin
        logging.warning("="*50)
        logging.warning("KH√îNG T√åM TH·∫§Y RPi.GPIO! ƒêANG CH·∫†Y ·ªû CH·∫æ ƒê·ªò GI·∫¢ L·∫¨P (MOCK).")
        logging.warning("="*50)

    def setmode(self, mode): logging.info(f"[MOCK] setmode={mode}")
    def setwarnings(self, value): logging.info(f"[MOCK] setwarnings={value}")
    def setup(self, pin, mode, pull_up_down=None):
        if pin is not None:
            logging.info(f"[MOCK] setup pin {pin} mode={mode} pull_up_down={pull_up_down}")
            if mode == self.OUT:
                self.pin_states[pin] = self.LOW # M·∫∑c ƒë·ªãnh l√† LOW
            else: # IN
                self.pin_states[pin] = self.HIGH # M·∫∑c ƒë·ªãnh l√† HIGH (do PUD_UP)
                self.input_pins.add(pin)
    def output(self, pin, value):
        if pin is not None:
            logging.info(f"[MOCK] output pin {pin}={value}")
            self.pin_states[pin] = value
    def input(self, pin):
        if pin is not None:
            # Gi·∫£ l·∫≠p sensor lu√¥n ·ªü tr·∫°ng th√°i 1 (kh√¥ng c√≥ v·∫≠t)
            val = self.pin_states.get(pin, self.HIGH)
            return val
        return self.HIGH # Pin None (kh√¥ng d√πng) lu√¥n tr·∫£ v·ªÅ HIGH
    def set_input_state(self, pin, logical_state):
        """ƒê·∫∑t tr·∫°ng th√°i ch√¢n input (0 ho·∫∑c 1)."""
        if pin not in self.input_pins:
            logging.info(f"[MOCK] T·ª± ƒë·ªông th√™m ch√¢n input {pin}.")
            self.input_pins.add(pin)
        state = self.HIGH if logical_state else self.LOW
        self.pin_states[pin] = state
        logging.info(f"[MOCK] set_input_state pin {pin} -> {state}")
        return state
    def toggle_input_state(self, pin):
        """ƒê·∫£o tr·∫°ng th√°i ch√¢n input v√† tr·∫£ v·ªÅ gi√° tr·ªã m·ªõi (0/1)."""
        if pin not in self.input_pins:
            self.input_pins.add(pin)
        current = self.input(pin)
        new_state = self.LOW if current == self.HIGH else self.HIGH
        self.pin_states[pin] = new_state
        logging.info(f"[MOCK] toggle_input_state pin {pin} -> {new_state}")
        return 0 if new_state == self.LOW else 1
    def cleanup(self): logging.info("[MOCK] cleanup GPIO")

def get_gpio_provider():
    """T·ª± ƒë·ªông ch·ªçn RealGPIO n·∫øu c√≥ th∆∞ vi·ªán, ng∆∞·ª£c l·∫°i ch·ªçn MockGPIO."""
    if RPiGPIO:
        return RealGPIO()
    return MockGPIO()

# =============================
#   QU·∫¢N L√ù L·ªñI (Error Manager)
# =============================
class ErrorManager:
    """Qu·∫£n l√Ω tr·∫°ng th√°i l·ªói/b·∫£o tr√¨ c·ªßa h·ªá th·ªëng."""
    def __init__(self):
        self.lock = threading.Lock()
        self.maintenance_mode = False
        self.last_error = None

    def trigger_maintenance(self, message):
        """K√≠ch ho·∫°t ch·∫ø ƒë·ªô b·∫£o tr√¨."""
        with self.lock:
            if self.maintenance_mode: # ƒê√£ ·ªü ch·∫ø ƒë·ªô b·∫£o tr√¨ r·ªìi
                return
            self.maintenance_mode = True
            self.last_error = message
            logging.critical("="*50)
            logging.critical(f"[MAINTENANCE MODE] L·ªói nghi√™m tr·ªçng: {message}")
            logging.critical("H·ªá th·ªëng ƒë√£ d·ª´ng ho·∫°t ƒë·ªông. Y√™u c·∫ßu ki·ªÉm tra.")
            logging.critical("="*50)
            # G·ª≠i log cho client ngay l·∫≠p t·ª©c
            broadcast_log({"log_type": "error", "message": f"MAINTENANCE MODE: {message}"})

    def reset(self):
        """Reset l·∫°i tr·∫°ng th√°i (khi admin y√™u c·∫ßu)."""
        with self.lock:
            self.maintenance_mode = False
            self.last_error = None
            logging.info("[MAINTENANCE MODE] ƒê√£ reset ch·∫ø ƒë·ªô b·∫£o tr√¨.")

            # Reset tr·∫°ng th√°i t·∫•t c·∫£ c√°c lanes v·ªÅ S·∫µn s√†ng
            with state_lock:
                for lane in system_state["lanes"]:
                    lane["status"] = "S·∫µn s√†ng"


    def is_maintenance(self):
        """Ki·ªÉm tra xem h·ªá th·ªëng c√≥ ƒëang b·∫£o tr√¨ kh√¥ng."""
        return self.maintenance_mode

# =============================
#       C·∫§U H√åNH CHUNG
# =============================
CAMERA_INDEX = 0
CONFIG_FILE = 'config.json'
LOG_FILE = 'system.log'
SORT_LOG_FILE = 'sort_log.json'
ACTIVE_LOW = True

# (M·ªöI) Th√¥ng tin ƒëƒÉng nh·∫≠p (c√≥ th·ªÉ t·∫Øt ho√†n to√†n qua bi·∫øn m√¥i tr∆∞·ªùng)
AUTH_ENABLED = os.environ.get("APP_AUTH_ENABLED", "false").strip().lower() in {"1", "true", "yes", "on"}
USERNAME = os.environ.get("APP_USERNAME", "admin")
PASSWORD = os.environ.get("APP_PASSWORD", "123")

# =============================
#     KH·ªûI T·∫†O C√ÅC ƒê·ªêI T∆Ø·ª¢NG
# =============================
GPIO = get_gpio_provider()
error_manager = ErrorManager()

# Kh·ªüi t·∫°o ThreadPoolExecutor (gi·ªõi h·∫°n 3 lu·ªìng test)
executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="TestWorker")
# Th√™m lock cho file sort_log.json
sort_log_lock = threading.Lock()

# =============================
#       KHAI B√ÅO CH√ÇN GPIO
# =============================
# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho 4 lanes (3 ƒë·∫©y, 1 ƒëi th·∫≥ng) - ƒê√£ th√™m ID c·ªë ƒë·ªãnh
DEFAULT_LANES_CONFIG = [
    {"id": "A", "name": "Ph√¢n lo·∫°i A (ƒê·∫©y)", "sensor_pin": 3, "push_pin": 17, "pull_pin": 18},
    {"id": "B", "name": "Ph√¢n lo·∫°i B (ƒê·∫©y)", "sensor_pin": 23, "push_pin": 27, "pull_pin": 14},
    {"id": "C", "name": "Ph√¢n lo·∫°i C (ƒê·∫©y)", "sensor_pin": 24, "push_pin": 22, "pull_pin": 4},
    {"id": "D", "name": "Lane D (ƒêi th·∫≥ng/Tho√°t)", "sensor_pin": 25, "push_pin": None, "pull_pin": None},
]
lanes_config = DEFAULT_LANES_CONFIG # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ file config

# T·∫°o danh s√°ch ch√¢n t·ª´ config (sau khi load)
RELAY_PINS = []
SENSOR_PINS = []

# =============================
#     H√ÄM ƒêI·ªÄU KHI·ªÇN RELAY
# =============================
def RELAY_ON(pin):
    """B·∫≠t relay (k√≠ch ho·∫°t)."""
    if pin is not None:
        GPIO.output(pin, GPIO.LOW if ACTIVE_LOW else GPIO.HIGH)

def RELAY_OFF(pin):
    """T·∫Øt relay (ng·ª´ng k√≠ch ho·∫°t)."""
    if pin is not None:
        GPIO.output(pin, GPIO.HIGH if ACTIVE_LOW else GPIO.LOW)

# =============================
#       TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG
# =============================
# C·∫•u tr√∫c system_state ban ƒë·∫ßu, lanes s·∫Ω ƒë∆∞·ª£c t·∫°o ƒë·ªông t·ª´ config
system_state = {
    "lanes": [], # S·∫Ω ƒë∆∞·ª£c t·∫°o ƒë·ªông t·ª´ lanes_config
    "timing_config": {
        "cycle_delay": 0.3,
        "settle_delay": 0.2,
        "sensor_debounce": 0.1,
        "push_delay": 0.0,
        "gpio_mode": "BCM"
    },
    "is_mock": isinstance(GPIO, MockGPIO),
    "maintenance_mode": False,
    "auth_enabled": AUTH_ENABLED,
    "gpio_mode": "BCM",
    "last_error": None,
    "queue_indices": [] # (M·ªöI) Th√™m m·∫£ng ch·ª©a index c·ªßa h√†ng ch·ªù
}

# C√°c bi·∫øn global cho threading
state_lock = threading.Lock()
main_loop_running = True
latest_frame = None
frame_lock = threading.Lock()

# H√†ng ch·ªù QR (Queue)
qr_queue = []
queue_lock = threading.Lock()
# CH·ªêNG K·∫∏T H√ÄNG CH·ªú
QUEUE_HEAD_TIMEOUT = 10.0 # Timeout (gi√¢y) cho v·∫≠t ph·∫©m ƒë·∫ßu h√†ng ch·ªù
queue_head_since = 0.0 # Th·ªùi ƒëi·ªÉm v·∫≠t ph·∫©m ƒë·∫ßu ti√™n ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù

# Bi·∫øn cho vi·ªác ch·ªëng nhi·ªÖu (debounce) sensor
last_sensor_state = []
last_sensor_trigger_time = []

# Bi·∫øn to√†n c·ª•c cho ch·ª©c nƒÉng Test
AUTO_TEST_ENABLED = False
auto_test_last_state = []
auto_test_last_trigger = []


# =============================
#     H√ÄM KH·ªûI ƒê·ªòNG & CONFIG
# =============================
def load_local_config():
    """T·∫£i c·∫•u h√¨nh t·ª´ config.json, bao g·ªìm c·∫£ timing v√† lanes."""
    global lanes_config, RELAY_PINS, SENSOR_PINS
    global last_sensor_state, last_sensor_trigger_time
    global auto_test_last_state, auto_test_last_trigger

    default_timing_config = {
        "cycle_delay": 0.3,
        "settle_delay": 0.2,
        "sensor_debounce": 0.1,
        "push_delay": 0.0,
        "gpio_mode": "BCM"
    }
    default_config_full = {
        "timing_config": default_timing_config,
        "lanes_config": DEFAULT_LANES_CONFIG
    }

    loaded_config = default_config_full

    if os.path.exists(CONFIG_FILE):
        try:
            # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ƒë·ªçc
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                file_content = f.read()
                if not file_content:
                    logging.warning("[CONFIG] File config r·ªóng, d√πng m·∫∑c ƒë·ªãnh.")
                else:
                    loaded_config_from_file = json.loads(file_content)
                    
                    # Merge timing config
                    timing_cfg = default_timing_config.copy()
                    timing_cfg.update(loaded_config_from_file.get('timing_config', {}))
                    loaded_config['timing_config'] = timing_cfg
                    
                    # Merge lanes config
                    # (M·ªöI) D√πng h√†m an to√†n ƒë·ªÉ th√™m 'id' n·∫øu thi·∫øu (t·ª´ c·∫•u h√¨nh c≈©)
                    lanes_from_file = loaded_config_from_file.get('lanes_config', DEFAULT_LANES_CONFIG)
                    loaded_config['lanes_config'] = ensure_lane_ids(lanes_from_file)

        except json.JSONDecodeError as e:
            # L·ªói JSON Decode
            logging.error(f"[CONFIG] L·ªói JSON Decode file config ({e}), d√πng m·∫∑c ƒë·ªãnh.")
            error_manager.trigger_maintenance(f"L·ªói JSON file config.json: {e}")
            loaded_config = default_config_full
        except UnicodeDecodeError as e:
            # L·ªói Unicode (th∆∞·ªùng l√† l·ªói charmap)
            logging.error(f"[CONFIG] L·ªói m√£ h√≥a (Unicode) file config ({e}), d√πng m·∫∑c ƒë·ªãnh.")
            error_manager.trigger_maintenance(f"L·ªói m√£ h√≥a file config.json: {e}")
            loaded_config = default_config_full
        except Exception as e:
            logging.error(f"[CONFIG] L·ªói ƒë·ªçc file config ({e}), d√πng m·∫∑c ƒë·ªãnh.")
            error_manager.trigger_maintenance(f"L·ªói ƒë·ªçc file config.json: {e}")
            loaded_config = default_config_full
    else:
        logging.warning("[CONFIG] Kh√¥ng c√≥ file config, d√πng m·∫∑c ƒë·ªãnh v√† t·∫°o m·ªõi.")
        try:
            # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ghi
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(loaded_config, f, indent=4) # L∆∞u config ƒë·∫ßy ƒë·ªß
        except Exception as e:
            logging.error(f"[CONFIG] Kh√¥ng th·ªÉ t·∫°o file config m·ªõi: {e}")

    # C·∫≠p nh·∫≠t global config v√† state
    lanes_config = loaded_config['lanes_config']
    num_lanes = len(lanes_config)

    # T·∫°o l·∫°i system_state["lanes"] d·ª±a tr√™n config m·ªõi
    new_system_lanes = []
    RELAY_PINS = []
    SENSOR_PINS = []
    for i, lane_cfg in enumerate(lanes_config):
        # L·∫•y ID c·ªë ƒë·ªãnh 
        lane_name = lane_cfg.get("name", f"Lane {i+1}")
        lane_id = lane_cfg.get("id", f"LANE_{i+1}") # L·∫•y ID n·∫øu c√≥, n·∫øu kh√¥ng d√πng fallback an to√†n
        
        new_system_lanes.append({
            "name": lane_name,
            "id": lane_id,
            "status": "S·∫µn s√†ng",
            "count": 0,
            "sensor_pin": lane_cfg.get("sensor_pin"),
            "push_pin": lane_cfg.get("push_pin"),
            "pull_pin": lane_cfg.get("pull_pin"),
            "sensor_reading": 1,
            "relay_grab": 0,
            "relay_push": 0
        })
        
        if lane_cfg.get("sensor_pin") is not None: SENSOR_PINS.append(lane_cfg["sensor_pin"])
        if lane_cfg.get("push_pin") is not None: RELAY_PINS.append(lane_cfg["push_pin"])
        if lane_cfg.get("pull_pin") is not None: RELAY_PINS.append(lane_cfg["pull_pin"])

    # Kh·ªüi t·∫°o c√°c bi·∫øn state d·ª±a tr√™n s·ªë lanes
    last_sensor_state = [1] * num_lanes
    last_sensor_trigger_time = [0.0] * num_lanes
    auto_test_last_state = [1] * num_lanes
    auto_test_last_trigger = [0.0] * num_lanes

    with state_lock:
        system_state['timing_config'] = loaded_config['timing_config']
        system_state['gpio_mode'] = loaded_config['timing_config'].get("gpio_mode", "BCM")
        system_state['lanes'] = new_system_lanes
        system_state['auth_enabled'] = AUTH_ENABLED
        system_state['is_mock'] = isinstance(GPIO, MockGPIO)
    logging.info(f"[CONFIG] Loaded {num_lanes} lanes config.")
    logging.info(f"[CONFIG] Loaded timing config: {system_state['timing_config']}")

# (M·ªöI) H√†m ƒë·∫£m b·∫£o m·ªói lane c√≥ m·ªôt ID c·ªë ƒë·ªãnh
def ensure_lane_ids(lanes_list):
    """Th√™m ID m·∫∑c ƒë·ªãnh ('A', 'B', 'C', ...) n·∫øu lane b·ªã thi·∫øu tr∆∞·ªùng 'id'."""
    default_ids = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] # Th√™m ID m·∫∑c ƒë·ªãnh
    for i, lane in enumerate(lanes_list):
        if 'id' not in lane or not lane['id']:
            if i < len(default_ids):
                lane['id'] = default_ids[i]
                logging.warning(f"[CONFIG] Lane {i+1} thi·∫øu ID. ƒê√£ g√°n ID m·∫∑c ƒë·ªãnh: {lane['id']}")
            else:
                lane['id'] = f"LANE_{i+1}"
                logging.warning(f"[CONFIG] Lane {i+1} thi·∫øu ID. ƒê√£ g√°n ID fallback: {lane['id']}")
    return lanes_list


def reset_all_relays_to_default():
    """Reset t·∫•t c·∫£ relay v·ªÅ tr·∫°ng th√°i an to√†n (THU B·∫¨T, ƒê·∫®Y T·∫ÆT)."""
    logging.info("[GPIO] Reset t·∫•t c·∫£ relay v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh (THU B·∫¨T).")
    with state_lock:
        # L·∫∑p qua state ƒë·ªÉ ƒë·∫£m b·∫£o d√πng ƒë√∫ng pin ƒë√£ load
        for lane in system_state["lanes"]:
            # Ch·ªâ c·ªë g·∫Øng ƒëi·ªÅu khi·ªÉn n·∫øu pin kh√¥ng ph·∫£i l√† None
            if lane.get("pull_pin") is not None: RELAY_ON(lane["pull_pin"])
            if lane.get("push_pin") is not None: RELAY_OFF(lane["push_pin"])
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i (0 ho·∫∑c 1)
            lane["relay_grab"] = 1 if lane.get("pull_pin") is not None else 0
            lane["relay_push"] = 0
            lane["status"] = "S·∫µn s√†ng"
    time.sleep(0.1)
    logging.info("[GPIO] Reset ho√†n t·∫•t.")

def periodic_config_save():
    """T·ª± ƒë·ªông l∆∞u config m·ªói 60s (bao g·ªìm c·∫£ timing v√† lanes)."""
    while main_loop_running:
        time.sleep(60)

        if error_manager.is_maintenance():
            continue

        try:
            config_to_save = {}
            with state_lock:
                config_to_save['timing_config'] = system_state['timing_config'].copy()
                # L·∫•y lanes_config hi·ªán t·∫°i (c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi)
                current_lanes_config = []
                for lane_state in system_state['lanes']:
                    # Ch·ªâ l∆∞u c√°c tr∆∞·ªùng c·∫ßn thi·∫øt, bao g·ªìm ID
                    current_lanes_config.append({
                        "id": lane_state['id'], # L∆∞u l·∫°i ID c·ªë ƒë·ªãnh
                        "name": lane_state['name'],
                        "sensor_pin": lane_state.get('sensor_pin'), 
                        "push_pin": lane_state.get('push_pin'), 
                        "pull_pin": lane_state.get('pull_pin')
                    })
                config_to_save['lanes_config'] = current_lanes_config

            # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ghi
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(config_to_save, f, indent=4)
            logging.info("[CONFIG] ƒê√£ t·ª± ƒë·ªông l∆∞u config (timing + lanes).")
        except Exception as e:
            logging.error(f"[CONFIG] L·ªói t·ª± ƒë·ªông l∆∞u config: {e}")

# =============================
#       LU·ªíNG CAMERA
# =============================
def camera_capture_thread():
    global latest_frame
    camera = cv2.VideoCapture(CAMERA_INDEX)
    camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    camera.set(cv2.CAP_PROP_BUFFERSIZE, 1)

    if not camera.isOpened():
        logging.error("[ERROR] Kh√¥ng m·ªü ƒë∆∞·ª£c camera.")
        error_manager.trigger_maintenance("Kh√¥ng th·ªÉ m·ªü camera.")
        return

    retries = 0
    max_retries = 5

    while main_loop_running:
        if error_manager.is_maintenance():
            time.sleep(0.5)
            continue

        ret, frame = camera.read()
        if not ret:
            retries += 1
            logging.warning(f"[WARN] M·∫•t camera (l·∫ßn {retries}/{max_retries}), th·ª≠ kh·ªüi ƒë·ªông l·∫°i...")
            broadcast_log({"log_type":"error","message":f"M·∫•t camera (l·∫ßn {retries}), ƒëang th·ª≠ l·∫°i..."})

            if retries > max_retries:
                logging.critical("[ERROR] Camera l·ªói vƒ©nh vi·ªÖn. Chuy·ªÉn sang ch·∫ø ƒë·ªô b·∫£o tr√¨.")
                error_manager.trigger_maintenance("Camera l·ªói vƒ©nh vi·ªÖn (m·∫•t k·∫øt n·ªëi).")
                break

            camera.release()
            time.sleep(1)
            camera = cv2.VideoCapture(CAMERA_INDEX)
            continue

        retries = 0

        with frame_lock:
            latest_frame = frame.copy()
        time.sleep(1 / 30)
    camera.release()

# =============================
#     L∆ØU LOG ƒê·∫æM S·∫¢N PH·∫®M
# =============================
def log_sort_count(lane_index, lane_name):
    """Ghi l·∫°i s·ªë l∆∞·ª£ng ƒë·∫øm v√†o file JSON theo ng√†y (an to√†n)."""
    with sort_log_lock:
        try:
            today = time.strftime('%Y-%m-%d')

            sort_log = {}
            if os.path.exists(SORT_LOG_FILE):
                try:
                    # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ƒë·ªçc
                    with open(SORT_LOG_FILE, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                        if file_content:
                            sort_log = json.loads(file_content)
                except json.JSONDecodeError:
                    logging.error(f"[SORT_LOG] L·ªói ƒë·ªçc file {SORT_LOG_FILE}, file c√≥ th·ªÉ b·ªã h·ªèng.")
                    backup_name = f"{SORT_LOG_FILE}.{time.strftime('%Y%m%d_%H%M%S')}.bak"
                    try:
                        os.rename(SORT_LOG_FILE, backup_name)
                        logging.warning(f"[SORT_LOG] ƒê√£ backup file l·ªói th√†nh {backup_name}")
                    except Exception as re:
                        logging.error(f"[SORT_LOG] Kh√¥ng th·ªÉ backup file l·ªói: {re}")
                    sort_log = {}
                except Exception as e:
                    logging.error(f"[SORT_LOG] L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc file: {e}")
                    sort_log = {}

            sort_log.setdefault(today, {})
            sort_log[today].setdefault(lane_name, 0)

            sort_log[today][lane_name] += 1

            # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ghi
            with open(SORT_LOG_FILE, 'w', encoding='utf-8') as f:
                json.dump(sort_log, f, indent=4)

        except Exception as e:
            logging.error(f"[ERROR] L·ªói khi ghi sort_log.json: {e}")

# =============================
#     CHU TR√åNH PH√ÇN LO·∫†I
# =============================
def sorting_process(lane_index):
    """Quy tr√¨nh ƒë·∫©y-thu piston (ch·∫°y tr√™n 1 lu·ªìng ri√™ng)."""
    lane_name = ""
    push_pin, pull_pin = None, None
    is_sorting_lane = False

    try:
        with state_lock:
            if not (0 <= lane_index < len(system_state["lanes"])):
                logging.error(f"[SORT] Lane index {lane_index} kh√¥ng h·ª£p l·ªá.")
                return

            cfg = system_state['timing_config']
            delay = cfg['cycle_delay']
            settle_delay = cfg['settle_delay']

            lane = system_state["lanes"][lane_index]
            lane_name = lane["name"]
            push_pin = lane.get("push_pin")
            pull_pin = lane.get("pull_pin")
            
            if push_pin is None and pull_pin is None:
                is_sorting_lane = False
            else:
                is_sorting_lane = True

            if is_sorting_lane and (push_pin is None or pull_pin is None):
                logging.error(f"[SORT] Lane {lane_name} (index {lane_index}) ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªß ch√¢n relay.")
                lane["status"] = "L·ªói Config"
                broadcast_log({"log_type": "error", "message": f"Lane {lane_name} thi·∫øu c·∫•u h√¨nh ch√¢n relay."})
                return

            lane["status"] = "ƒêang ph√¢n lo·∫°i..." if is_sorting_lane else "ƒêang ƒëi th·∫≥ng..."

        # X·ª≠ l√Ω Lane ƒëi th·∫≥ng
        if not is_sorting_lane:
            broadcast_log({"log_type": "info", "message": f"V·∫≠t ph·∫©m ƒëi th·∫≥ng qua {lane_name}"})
        
        # Chu tr√¨nh Ph√¢n lo·∫°i (Ch·ªâ cho Lane c√≥ piston)
        if is_sorting_lane:
            broadcast_log({"log_type": "info", "message": f"B·∫Øt ƒë·∫ßu chu tr√¨nh ƒë·∫©y {lane_name}"})

            # 1. Nh·∫£ Grab (Pull OFF)
            RELAY_OFF(pull_pin)
            with state_lock: system_state["lanes"][lane_index]["relay_grab"] = 0
            time.sleep(settle_delay)
            if not main_loop_running: return

            # 2. K√≠ch ho·∫°t Push (Push ON)
            RELAY_ON(push_pin)
            with state_lock: system_state["lanes"][lane_index]["relay_push"] = 1
            time.sleep(delay)
            if not main_loop_running: return

            # 3. T·∫Øt Push (Push OFF)
            RELAY_OFF(push_pin)
            with state_lock: system_state["lanes"][lane_index]["relay_push"] = 0
            time.sleep(settle_delay)
            if not main_loop_running: return

            # 4. K√≠ch ho·∫°t Grab (Pull ON)
            RELAY_ON(pull_pin)
            with state_lock: system_state["lanes"][lane_index]["relay_grab"] = 1

    except Exception as e:
        logging.error(f"[SORT] L·ªói trong sorting_process (lane {lane_name}): {e}")
        error_manager.trigger_maintenance(f"L·ªói sorting_process (Lane {lane_name}): {e}")
    finally:
        with state_lock:
            if 0 <= lane_index < len(system_state["lanes"]):
                lane = system_state["lanes"][lane_index]
                if lane_name and lane["status"] != "L·ªói Config":
                    lane["count"] += 1
                    log_type = "sort" if is_sorting_lane else "pass"
                    
                    broadcast_log({"log_type": log_type, "name": lane_name, "count": lane['count']})
                    log_sort_count(lane_index, lane_name)

                    if lane["status"] != "L·ªói Config":
                        lane["status"] = "S·∫µn s√†ng"

        if lane_name:
            if is_sorting_lane:
                broadcast_log({"log_type": "info", "message": f"Ho√†n t·∫•t chu tr√¨nh cho {lane_name}"})
            else:
                broadcast_log({"log_type": "info", "message": f"Ho√†n t·∫•t ƒë·∫øm v·∫≠t ph·∫©m ƒëi th·∫≥ng qua {lane_name}"})


def handle_sorting_with_delay(lane_index):
    """Lu·ªìng trung gian, ch·ªù push_delay r·ªìi m·ªõi g·ªçi sorting_process."""
    push_delay = 0.0
    lane_name_for_log = f"Lane {lane_index + 1}"

    try:
        with state_lock:
            if not (0 <= lane_index < len(system_state["lanes"])):
                logging.error(f"[DELAY] Lane index {lane_index} kh√¥ng h·ª£p l·ªá.")
                return
            push_delay = system_state['timing_config'].get('push_delay', 0.0)
            lane_name_for_log = system_state['lanes'][lane_index]['name']

        if push_delay > 0:
            broadcast_log({"log_type": "info", "message": f"ƒê√£ th·∫•y v·∫≠t {lane_name_for_log}, ch·ªù {push_delay}s..."})
            time.sleep(push_delay)

        if not main_loop_running:
            broadcast_log({"log_type": "warn", "message": f"H·ªßy chu tr√¨nh {lane_name_for_log} do h·ªá th·ªëng ƒëang t·∫Øt."})
            return

        with state_lock:
            if not (0 <= lane_index < len(system_state["lanes"])): return
            current_status = system_state["lanes"][lane_index]["status"]

        if current_status == "ƒêang ch·ªù ƒë·∫©y":
            sorting_process(lane_index)
        else:
            broadcast_log({"log_type": "warn", "message": f"H·ªßy chu tr√¨nh {lane_name_for_log} do tr·∫°ng th√°i thay ƒë·ªïi."})

    except Exception as e:
        logging.error(f"[ERROR] L·ªói trong lu·ªìng handle_sorting_with_delay (lane {lane_name_for_log}): {e}")
        error_manager.trigger_maintenance(f"L·ªói lu·ªìng sorting_delay (Lane {lane_name_for_log}): {e}")
        with state_lock:
            if 0 <= lane_index < len(system_state["lanes"]):
                if system_state["lanes"][lane_index]["status"] == "ƒêang ch·ªù ƒë·∫©y":
                    system_state["lanes"][lane_index]["status"] = "S·∫µn s√†ng"
                    broadcast_log({"log_type": "error", "message": f"L·ªói delay, reset {lane_name_for_log}"})


# =============================
#     QU√âT M√É QR T·ª∞ ƒê·ªòNG
# =============================
def qr_detection_loop():
    detector = cv2.QRCodeDetector()
    last_qr, last_time = "", 0.0
    
    logging.info("[QR] Thread QR Detection started (dynamic lane map enabled).")

    while main_loop_running:
        if AUTO_TEST_ENABLED or error_manager.is_maintenance():
            time.sleep(0.2)
            continue
        
        # üîÑ T·∫°o l·∫°i LANE_MAP ƒë·ªông theo config hi·ªán t·∫°i
        with state_lock:
            # Map ID c·ªë ƒë·ªãnh ƒë√£ chu·∫©n h√≥a (A, B, C...) sang Index (0, 1, 2...)
            LANE_MAP = {canon_id(lane.get("id", f"LANE_{idx+1}")): idx 
                        for idx, lane in enumerate(system_state["lanes"])}

        frame_copy = None
        with frame_lock:
            if latest_frame is not None:
                frame_copy = latest_frame.copy()

        if frame_copy is None:
            time.sleep(0.1)
            continue

        try:
            gray_frame = cv2.cvtColor(frame_copy, cv2.COLOR_BGR2GRAY)
            if gray_frame.mean() < 10:
                time.sleep(0.1)
                continue
        except Exception:
            pass

        try:
            data, _, _ = detector.detectAndDecode(frame_copy)
        except cv2.error:
            data = None
            time.sleep(0.1)
            continue

        if data and (data != last_qr or time.time() - last_time > 3.0):
            last_qr, last_time = data, time.time()
            
            # (M·ªöI) Chu·∫©n h√≥a d·ªØ li·ªáu QR code ƒë·∫ßu v√†o
            data_key = canon_id(data)
            data_raw = data.strip()

            if data_key in LANE_MAP:
                idx = LANE_MAP[data_key]

                with queue_lock:
                    is_queue_empty_before = not qr_queue
                    qr_queue.append(idx)
                    current_queue_for_log = list(qr_queue)

                    if is_queue_empty_before and qr_queue:
                        global queue_head_since
                        queue_head_since = time.time()

                with state_lock:
                    if 0 <= idx < len(system_state["lanes"]):
                        if system_state["lanes"][idx]["status"] == "S·∫µn s√†ng":
                            system_state["lanes"][idx]["status"] = "ƒêang ch·ªù v·∫≠t..."
                # (FIX L·ªñI ƒê·ªíNG B·ªò) C·∫≠p nh·∫≠t queue indices v√†o state
                system_state["queue_indices"] = current_queue_for_log


            # G·ª≠i log (v·∫´n d√πng data_raw cho log UI)
                broadcast_log({
                    "log_type": "qr",
                    "data": data_raw, 
                    "data_key": data_key, # Th√™m key ƒë√£ chu·∫©n h√≥a cho debug
                    "queue": current_queue_for_log
                })
                logging.info(f"[QR] '{data_raw}' -> canon='{data_key}' -> lane index {idx}")
                
                # (FIX L·ªñI ƒê·ªíNG B·ªò UI) ƒê·∫©y state update ngay l·∫≠p t·ª©c qua WebSocket
                with state_lock:
                    # ƒê·∫£m b·∫£o state ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc khi g·ª≠i
                    system_state["maintenance_mode"] = error_manager.is_maintenance()
                    system_state["last_error"] = error_manager.last_error
                    current_state_msg = json.dumps({"type": "state_update", "state": system_state})
                
                for client in _list_clients():
                    try:
                        client.send(current_state_msg)
                    except Exception:
                        _remove_client(client)
                        

            elif data_key == "NG":
                broadcast_log({"log_type": "qr_ng", "data": data_raw})
            else:
                # G·ª≠i data g·ªëc ch∆∞a chu·∫©n h√≥a (data.strip()) cho log UI, nh∆∞ng log console ID ƒë√£ chu·∫©n h√≥a
                broadcast_log({"log_type": "unknown_qr", "data": data_raw, "data_key": data_key}) 
                logging.warning(f"[QR] Kh√¥ng r√µ m√£ QR: raw='{data_raw}', canon='{data_key}', keys={list(LANE_MAP.keys())}")

        time.sleep(0.1)

# =============================
#     LU·ªíNG GI√ÅM S√ÅT SENSOR
# =============================
def sensor_monitoring_thread():
    global last_sensor_state, last_sensor_trigger_time
    global queue_head_since

    try:
        while main_loop_running:
            if AUTO_TEST_ENABLED or error_manager.is_maintenance():
                time.sleep(0.1)
                continue

            with state_lock:
                debounce_time = system_state['timing_config']['sensor_debounce']
                num_lanes = len(system_state['lanes'])
            now = time.time()

            # --- LOGIC CH·ªêNG K·∫∏T H√ÄNG CH·ªú ---
            with queue_lock:
                if qr_queue and queue_head_since > 0.0:
                    if (now - queue_head_since) > QUEUE_HEAD_TIMEOUT:
                        expected_lane_index = qr_queue[0]
                        expected_lane_name = "UNKNOWN"
                        with state_lock:
                            if 0 <= expected_lane_index < len(system_state["lanes"]):
                                expected_lane_name = system_state['lanes'][expected_lane_index]['name']
                                if system_state["lanes"][expected_lane_index]["status"] == "ƒêang ch·ªù v·∫≠t...":
                                    system_state["lanes"][expected_lane_index]["status"] = "S·∫µn s√†ng"

                        qr_queue.pop(0)
                        current_queue_for_log = list(qr_queue)
                        queue_head_since = now if qr_queue else 0.0

                        broadcast_log({
                            "log_type": "warn",
                            "message": f"TIMEOUT! ƒê√£ t·ª± ƒë·ªông x√≥a v·∫≠t ph·∫©m {expected_lane_name} kh·ªèi h√†ng ch·ªù (>{QUEUE_HEAD_TIMEOUT}s).",
                            "queue": current_queue_for_log
                        })
                        with state_lock:
                            system_state["queue_indices"] = current_queue_for_log

            # --- ƒê·ªåC SENSOR T·ª™NG LANE ---
            for i in range(num_lanes):
                with state_lock:
                    if not (0 <= i < len(system_state["lanes"])):
                        continue
                    lane_for_read = system_state["lanes"][i]
                    sensor_pin = lane_for_read.get("sensor_pin")
                    push_pin = lane_for_read.get("push_pin")

                if sensor_pin is None:
                    continue

                try:
                    sensor_now = GPIO.input(sensor_pin)
                except Exception as gpio_e:
                    logging.error(f"[SENSOR] L·ªói ƒë·ªçc GPIO pin {sensor_pin} (Lane {lane_for_read.get('name', i+1)}): {gpio_e}")
                    error_manager.trigger_maintenance(f"L·ªói ƒë·ªçc sensor pin {sensor_pin} (Lane {lane_for_read.get('name', i+1)}): {gpio_e}")
                    continue

                with state_lock:
                    if 0 <= i < len(system_state["lanes"]):
                        system_state["lanes"][i]["sensor_reading"] = sensor_now

                # --- PH√ÅT HI·ªÜN S∆Ø·ªúN XU·ªêNG ---
                if sensor_now == 0 and last_sensor_state[i] == 1:
                    if (now - last_sensor_trigger_time[i]) > debounce_time:
                        last_sensor_trigger_time[i] = now

                        lane_name_for_log = "UNKNOWN"
                        with state_lock:
                            if 0 <= i < len(system_state["lanes"]):
                                lane_name_for_log = system_state["lanes"][i]['name']

                        with queue_lock:
                            if not qr_queue:
                                broadcast_log({"log_type": "warn", "message": f"Sensor {lane_name_for_log} (lane {i}) b·ªã k√≠ch ho·∫°t ngo√†i d·ª± ki·∫øn (h√†ng ch·ªù r·ªóng)."})
                                if push_pin is None:
                                    threading.Thread(target=sorting_process, args=(i,), daemon=True).start()
                                    with state_lock:
                                        system_state["lanes"][i]["status"] = "S·∫µn s√†ng"
                                continue

                            if i in qr_queue:
                                qr_queue.remove(i)
                                current_queue_for_log = list(qr_queue)
                                queue_head_since = now if qr_queue else 0.0
                                with state_lock:
                                    if 0 <= i < len(system_state["lanes"]):
                                        if push_pin is None:
                                            system_state["lanes"][i]["status"] = "ƒêang ƒëi th·∫≥ng..."
                                            threading.Thread(target=sorting_process, args=(i,), daemon=True).start()
                                        else:
                                            system_state["queue_indices"] = current_queue_for_log

                                broadcast_log({
                                    "log_type": "info",
                                    "message": f"Sensor {lane_name_for_log} kh·ªõp h√†ng ch·ªù (x·ª≠ l√Ω linh ho·∫°t).",
                                    "queue": current_queue_for_log
                                })
                            else:
                                current_queue_for_log = list(qr_queue)
                                broadcast_log({
                                    "log_type": "error",
                                    "message": f"Sensor {lane_name_for_log} k√≠ch ho·∫°t ngo√†i danh s√°ch h√†ng ch·ªù (v·∫≠t l·∫°?).",
                                    "queue": current_queue_for_log
                                })
                                error_manager.trigger_maintenance(f"Sensor {lane_name_for_log} k√≠ch ho·∫°t ngo√†i danh s√°ch h√†ng ch·ªù.")

                last_sensor_state[i] = sensor_now

            adaptive_sleep = 0.05 if all(s == 1 for s in last_sensor_state) else 0.01
            time.sleep(adaptive_sleep)

    except Exception as e:
        logging.error(f"[ERROR] Lu·ªìng sensor_monitoring_thread b·ªã crash: {e}")
        error_manager.trigger_maintenance(f"L·ªói lu·ªìng Sensor: {e}")



# =============================
#     FLASK + WEBSOCKET
# =============================
app = Flask(__name__)
sock = Sock(app)
connected_clients = set()
clients_lock = threading.Lock()

def _add_client(ws):
    with clients_lock:
        connected_clients.add(ws)

def _remove_client(ws):
    with clients_lock:
        connected_clients.discard(ws)

def _list_clients():
    with clients_lock:
        return list(connected_clients)

def broadcast_log(log_data):
    """G·ª≠i 1 tin nh·∫Øn log c·ª• th·ªÉ cho client."""
    log_data['timestamp'] = time.strftime('%H:%M:%S')
    msg = json.dumps({"type": "log", **log_data})
    for client in _list_clients():
        try:
            client.send(msg)
        except Exception:
            _remove_client(client)

# =============================
#     C√ÅC H√ÄM C·ª¶A FLASK (TI·∫æP)
# =============================
def check_auth(username, password):
    """Ki·ªÉm tra username v√† password."""
    if not AUTH_ENABLED:
        return True
    return username == USERNAME and password == PASSWORD

def authenticate():
    """G·ª≠i ph·∫£n h·ªìi 401 (Y√™u c·∫ßu ƒëƒÉng nh·∫≠p)."""
    return Response(
        'Y√™u c·∫ßu ƒëƒÉng nh·∫≠p.', 401,
        {'WWW-Authenticate': 'Basic realm="Login Required"'})

def requires_auth(f):
    """Decorator ƒë·ªÉ y√™u c·∫ßu ƒëƒÉng nh·∫≠p cho m·ªôt route."""
    @functools.wraps(f)
    def decorated(*args, **kwargs):
        if not AUTH_ENABLED:
            return f(*args, **kwargs)
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            return authenticate()
        return f(*args, **kwargs)
    return decorated

# --- C√°c h√†m broadcast ---
def broadcast_state():
    """G·ª≠i state cho client, ch·ªâ khi state thay ƒë·ªïi."""
    last_state_str = ""

    while main_loop_running:
        current_msg = ""
        with state_lock:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫£o tr√¨ v√† l·ªói cu·ªëi
            system_state["maintenance_mode"] = error_manager.is_maintenance()
            system_state["last_error"] = error_manager.last_error
            system_state["is_mock"] = isinstance(GPIO, MockGPIO)
            system_state["auth_enabled"] = AUTH_ENABLED
            # C·∫≠p nh·∫≠t ch·∫ø ƒë·ªô gpio t·ª´ timing_config
            system_state["gpio_mode"] = system_state['timing_config'].get('gpio_mode', 'BCM')
            current_msg = json.dumps({"type": "state_update", "state": system_state})

        if current_msg != last_state_str:
            for client in _list_clients():
                try:
                    client.send(current_msg)
                except Exception:
                    # G·ª° client l·ªói ra kh·ªèi danh s√°ch
                    _remove_client(client)
            last_state_str = current_msg

        time.sleep(0.5)

def generate_frames():
    """Stream video t·ª´ camera."""
    while main_loop_running:
        frame = None
        # Ch·ªâ stream n·∫øu kh√¥ng b·∫£o tr√¨
        if not error_manager.is_maintenance():
            with frame_lock:
                if latest_frame is not None:
                    frame = latest_frame.copy()

        if frame is None:
            # N·∫øu ƒëang b·∫£o tr√¨ ho·∫∑c kh√¥ng c√≥ frame, g·ª≠i frame ƒëen
            frame = cv2.imread('black_frame.png') # T·∫°o 1 file ·∫£nh ƒëen 640x480
            if frame is None: # N·∫øu ƒë·ªçc file l·ªói, t·∫°o frame ƒëen b·∫±ng numpy
                import numpy as np
                frame = np.zeros((480, 640, 3), dtype=np.uint8)
            time.sleep(0.1)
            # Kh√¥ng c·∫ßn continue, v·∫´n g·ª≠i frame ƒëen

        try:
            _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 70])
            yield (b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        except Exception as encode_e:
            logging.error(f"[CAMERA] L·ªói encode frame: {encode_e}")
            # G·ª≠i frame ƒëen n·∫øu encode l·ªói
            import numpy as np
            frame = np.zeros((480, 640, 3), dtype=np.uint8)
            _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 10]) # Ch·∫•t l∆∞·ª£ng th·∫•p
            yield (b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')

        time.sleep(1 / 20) # Gi·ªØ 20 FPS

# --- C√°c routes (endpoints) ---

@app.route('/')
@requires_auth
def index():
    """Trang ch·ªß (dashboard)."""
    return render_template('index4v3.html')

@app.route('/video_feed')
@requires_auth
def video_feed():
    """Ngu·ªìn c·∫•p video."""
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/config')
@requires_auth
def get_config():
    """API (GET) ƒë·ªÉ l·∫•y config hi·ªán t·∫°i (timing + lanes)."""
    with state_lock:
        config_data = {
            "timing_config": system_state.get('timing_config', {}),
            # (M·ªöI) Tr·∫£ v·ªÅ c·∫£ ID
            "lanes_config": [{
                "id": ln.get('id'), 
                "name": ln.get('name'),
                "sensor_pin": ln.get('sensor_pin'),
                "push_pin": ln.get('push_pin'),
                "pull_pin": ln.get('pull_pin')
             } for ln in system_state.get('lanes', [])]
        }
    return jsonify(config_data)

@app.route('/update_config', methods=['POST'])
@requires_auth
def update_config():
    """API (POST) ƒë·ªÉ c·∫≠p nh·∫≠t config (timing + lanes)."""
    global lanes_config, RELAY_PINS, SENSOR_PINS

    new_config_data = request.json
    if not new_config_data:
        return jsonify({"error": "Thi·∫øu d·ªØ li·ªáu JSON"}), 400

    logging.info(f"[CONFIG] Nh·∫≠n config m·ªõi t·ª´ API (POST): {new_config_data}")

    new_timing_config = new_config_data.get('timing_config', {})
    new_lanes_config = new_config_data.get('lanes_config')

    config_to_save = {}
    restart_required = False

    with state_lock:
        # 1. C·∫≠p nh·∫≠t Timing Config
        current_timing = system_state['timing_config']
        current_gpio_mode = current_timing.get('gpio_mode', 'BCM')
        timing_changed = False
        
        temp_timing = current_timing.copy()
        temp_timing.update(new_timing_config)
        if any(temp_timing.get(k) != current_timing.get(k) for k in new_timing_config if k != 'gpio_mode'):
            timing_changed = True
        
        current_timing.update({k:v for k,v in new_timing_config.items() if k != 'gpio_mode'})
        
        new_gpio_mode = new_timing_config.get('gpio_mode', current_gpio_mode)

        if new_gpio_mode != current_gpio_mode:
            logging.warning("[CONFIG] Ch·∫ø ƒë·ªô GPIO ƒë√£ thay ƒë·ªïi. C·∫ßn kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ √°p d·ª•ng.")
            broadcast_log({"log_type": "warn", "message": "GPIO Mode ƒë√£ ƒë·ªïi. C·∫ßn kh·ªüi ƒë·ªông l·∫°i!"})
            restart_required = True
            config_to_save['timing_config'] = current_timing.copy()
            config_to_save['timing_config']['gpio_mode'] = new_gpio_mode
        elif timing_changed:
            config_to_save['timing_config'] = current_timing.copy()
        else:
            config_to_save['timing_config'] = current_timing.copy()


        # 2. C·∫≠p nh·∫≠t Lanes Config (n·∫øu c√≥ g·ª≠i)
        if new_lanes_config is not None:
            logging.info("[CONFIG] C·∫≠p nh·∫≠t c·∫•u h√¨nh lanes...")
            
            # (M·ªöI) ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c lane c√≥ ID tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            lanes_config = ensure_lane_ids(new_lanes_config)
            num_lanes = len(lanes_config)
            
            new_system_lanes = []
            new_relay_pins = []
            new_sensor_pins = []
            for i, lane_cfg in enumerate(lanes_config):
                lane_name = lane_cfg.get("name", f"Lane {i+1}")
                lane_id = lane_cfg.get("id") # ID ph·∫£i t·ªìn t·∫°i sau khi g·ªçi ensure_lane_ids

                new_system_lanes.append({
                    "name": lane_name,
                    "id": lane_id,
                    "status": "S·∫µn s√†ng", "count": 0, 
                    "sensor_pin": lane_cfg.get("sensor_pin"),
                    "push_pin": lane_cfg.get("push_pin"),
                    "pull_pin": lane_cfg.get("pull_pin"),
                    "sensor_reading": 1, "relay_grab": 0, "relay_push": 0
                })
                
                if lane_cfg.get("sensor_pin") is not None: new_sensor_pins.append(lane_cfg["sensor_pin"])
                if lane_cfg.get("push_pin") is not None: new_relay_pins.append(lane_cfg["push_pin"])
                if lane_cfg.get("pull_pin") is not None: new_relay_pins.append(lane_cfg["pull_pin"])

            system_state['lanes'] = new_system_lanes
            
            global last_sensor_state, last_sensor_trigger_time, auto_test_last_state, auto_test_last_trigger
            last_sensor_state = [1] * num_lanes
            last_sensor_trigger_time = [0.0] * num_lanes
            auto_test_last_state = [1] * num_lanes
            auto_test_last_trigger = [0.0] * num_lanes

            RELAY_PINS = new_relay_pins
            SENSOR_PINS = new_sensor_pins

            config_to_save['lanes_config'] = lanes_config
            restart_required = True
            logging.warning("[CONFIG] C·∫•u h√¨nh lanes ƒë√£ thay ƒë·ªïi. C·∫ßn kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.")
            broadcast_log({"log_type": "warn", "message": "C·∫•u h√¨nh Lanes ƒë√£ ƒë·ªïi. C·∫ßn kh·ªüi ƒë·ªông l·∫°i!"})
        else:
            current_lanes_cfg_for_save = []
            for lane_state in system_state['lanes']:
                # L∆∞u l·∫°i ID c·ªë ƒë·ªãnh khi l∆∞u file
                current_lanes_cfg_for_save.append({
                    "id": lane_state.get('id'),
                    "name": lane_state['name'],
                    "sensor_pin": lane_state.get('sensor_pin'),
                    "push_pin": lane_state.get('push_pin'),
                    "pull_pin": lane_state.get('pull_pin')
                })
            config_to_save['lanes_config'] = current_lanes_cfg_for_save
            
        if 'gpio_mode' in new_timing_config:
            config_to_save['timing_config']['gpio_mode'] = new_timing_config['gpio_mode']


    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            old_config_data = json.load(f)
    except Exception:
        old_config_data = {}
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            old_config_data = json.load(f)
    except Exception:
        old_config_data = {}

    try:
        # (S·ª¨A L·ªñI ENCODING) Bu·ªôc d√πng UTF-8 khi ghi
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config_to_save, f, indent=4)

        msg = "ƒê√£ l∆∞u config m·ªõi. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
        logging.info("[CONFIG] C·∫•u h√¨nh m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u (Hot Reload b·ªã t·∫Øt).")
        broadcast_log({
            "log_type": "info",
            "message": "ƒê√£ l∆∞u config. H√£y restart h·ªá th·ªëng ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
        })

        return jsonify({
            "message": msg,
            "config": config_to_save,
            "restart_required": True
        })

    except Exception as e:
        logging.error(f"[ERROR] Kh√¥ng th·ªÉ l∆∞u config (POST): {e}")
        broadcast_log({"log_type": "error", "message": f"L·ªói khi l∆∞u config (POST): {e}"})
        return jsonify({"error": str(e)}), 500





@app.route('/api/reset_maintenance', methods=['POST'])
@requires_auth
def reset_maintenance():
    """API (POST) ƒë·ªÉ reset ch·∫ø ƒë·ªô b·∫£o tr√¨."""
    if error_manager.is_maintenance():
        error_manager.reset()
        with queue_lock:
            global queue_head_since
            qr_queue.clear()
            queue_head_since = 0.0
        broadcast_log({"log_type": "success", "message": "Ch·∫ø ƒë·ªô b·∫£o tr√¨ ƒë√£ ƒë∆∞·ª£c reset t·ª´ UI. H√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c x√≥a."})
        return jsonify({"message": "Maintenance mode reset th√†nh c√¥ng."})
    else:
        return jsonify({"message": "H·ªá th·ªëng kh√¥ng ·ªü ch·∫ø ƒë·ªô b·∫£o tr√¨."})

@app.route('/api/queue/reset', methods=['POST'])
@requires_auth
def api_queue_reset():
    """API (POST) ƒë·ªÉ x√≥a h√†ng ch·ªù QR."""
    if error_manager.is_maintenance():
        return jsonify({"error": "H·ªá th·ªëng ƒëang b·∫£o tr√¨, kh√¥ng th·ªÉ reset h√†ng ch·ªù."}), 403

    try:
        with queue_lock:
            global queue_head_since
            qr_queue.clear()
            queue_head_since = 0.0
            current_queue_for_log = list(qr_queue)

        with state_lock:
            for lane in system_state["lanes"]:
                lane["status"] = "S·∫µn s√†ng"
            # (FIX L·ªñI ƒê·ªíNG B·ªò) C·∫≠p nh·∫≠t queue indices v√†o state
            system_state["queue_indices"] = current_queue_for_log

        broadcast_log({
            "log_type": "warn",
            "message": "H√†ng ch·ªù QR ƒë√£ ƒë∆∞·ª£c reset th·ªß c√¥ng t·ª´ UI.",
            "queue": current_queue_for_log
        })
        logging.info("[API] H√†ng ch·ªù QR ƒë√£ ƒë∆∞·ª£c reset th·ªß c√¥ng.")
        return jsonify({"message": "H√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c reset."})
    except Exception as e:
        logging.error(f"[API] L·ªói khi reset h√†ng ch·ªù: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/mock_gpio', methods=['POST'])
@requires_auth
def api_mock_gpio():
    """API (POST) ƒë·ªÉ ƒëi·ªÅu khi·ªÉn sensor ·ªü ch·∫ø ƒë·ªô gi·∫£ l·∫≠p."""
    if not isinstance(GPIO, MockGPIO):
        return jsonify({"error": "Ch·ª©c nƒÉng ch·ªâ kh·∫£ d·ª•ng ·ªü ch·∫ø ƒë·ªô m√¥ ph·ªèng."}), 400

    payload = request.get_json(silent=True) or {}
    lane_index = payload.get('lane_index')
    pin = payload.get('pin')
    requested_state = payload.get('state')

    if lane_index is not None and pin is None:
        try:
            lane_index = int(lane_index)
        except (TypeError, ValueError):
            return jsonify({"error": "lane_index kh√¥ng h·ª£p l·ªá."}), 400
        with state_lock:
            if 0 <= lane_index < len(system_state['lanes']):
                pin = system_state['lanes'][lane_index].get('sensor_pin')
            else:
                return jsonify({"error": "lane_index v∆∞·ª£t ngo√†i ph·∫°m vi."}), 400

    if pin is None:
        return jsonify({"error": "Thi·∫øu th√¥ng tin ch√¢n sensor."}), 400

    try:
        pin = int(pin)
    except (TypeError, ValueError):
        return jsonify({"error": "Gi√° tr·ªã pin kh√¥ng h·ª£p l·ªá."}), 400

    if pin is None:
        return jsonify({"error": "Kh√¥ng th·ªÉ m√¥ ph·ªèng sensor cho Lane kh√¥ng c√≥ ch√¢n c·∫Øm."}), 400


    if requested_state is None:
        logical_state = GPIO.toggle_input_state(pin)
    else:
        logical_state = 1 if str(requested_state).strip().lower() in {"1", "true", "high", "inactive"} else 0
        GPIO.set_input_state(pin, logical_state)

    lane_name = None
    with state_lock:
        for lane in system_state['lanes']:
            if lane.get('sensor_pin') == pin:
                lane['sensor_reading'] = 0 if logical_state == 0 else 1
                lane_name = lane.get('name', lane_name)

    state_label = 'ACTIVE (LOW)' if logical_state == 0 else 'INACTIVE (HIGH)'
    message = f"[MOCK] Sensor pin {pin} -> {state_label}"
    if lane_name:
        message += f" ({lane_name})"
    broadcast_log({
        "log_type": "info",
        "message": message
    })
    return jsonify({"pin": pin, "state": logical_state, "lane": lane_name})
@sock.route('/ws')
@requires_auth
def ws_route(ws):
    """K·∫øt n·ªëi WebSocket ch√≠nh."""
    global AUTO_TEST_ENABLED

    auth = request.authorization if AUTH_ENABLED else None
    if AUTH_ENABLED and (not auth or not check_auth(auth.username, auth.password)):
        logging.warning("[WS] Unauthorized connection attempt.")
        ws.close(code=1008, reason="Unauthorized")
        return

    client_label = auth.username if auth else f"guest-{id(ws):x}"
    _add_client(ws)
    logging.info(f"[WS] Client {client_label} connected. Total: {len(_list_clients())}")

    try:
        with state_lock:
            system_state["maintenance_mode"] = error_manager.is_maintenance()
            system_state["last_error"] = error_manager.last_error
            system_state["auth_enabled"] = AUTH_ENABLED
            initial_state_msg = json.dumps({"type": "state_update", "state": system_state})
        ws.send(initial_state_msg)
    except Exception as e:
        logging.warning(f"[WS] L·ªói g·ª≠i state ban ƒë·∫ßu: {e}")
        _remove_client(ws)
        return

    try:
        while True:
            message = ws.receive()
            if message:
                try:
                    data = json.loads(message)
                    action = data.get('action')

                    if error_manager.is_maintenance() and action != "reset_maintenance":
                        broadcast_log({"log_type": "error", "message": "H·ªá th·ªëng ƒëang b·∫£o tr√¨, kh√¥ng th·ªÉ thao t√°c."})
                        continue

                    if action == 'reset_count':
                        lane_idx = data.get('lane_index')
                        with state_lock:
                            if lane_idx == 'all':
                                for i in range(len(system_state['lanes'])):
                                    system_state['lanes'][i]['count'] = 0
                                broadcast_log({"log_type": "info", "message": f"{client_label} ƒë√£ reset ƒë·∫øm to√†n b·ªô."})
                            elif lane_idx is not None and 0 <= lane_idx < len(system_state['lanes']):
                                lane_name = system_state['lanes'][lane_idx]['name']
                                system_state['lanes'][lane_idx]['count'] = 0
                                broadcast_log({"log_type": "info", "message": f"{client_label} ƒë√£ reset ƒë·∫øm {lane_name}."})

                    elif action == "test_relay":
                        lane_index = data.get("lane_index")
                        relay_action = data.get("relay_action")
                        if lane_index is not None and relay_action:
                            executor.submit(_run_test_relay, lane_index, relay_action)

                    elif action == "test_all_relays":
                        executor.submit(_run_test_all_relays)

                    elif action == "toggle_auto_test":
                        AUTO_TEST_ENABLED = data.get("enabled", False)
                        logging.info(f"[TEST] Auto-Test (Sensor->Relay) set by {client_label} to: {AUTO_TEST_ENABLED}")
                        broadcast_log({"log_type": "warn", "message": f"Ch·∫ø ƒë·ªô Auto-Test ƒë√£ { 'B·∫¨T' if AUTO_TEST_ENABLED else 'T·∫ÆT' } b·ªüi {client_label}."})
                        if not AUTO_TEST_ENABLED:
                            reset_all_relays_to_default()

                    elif action == "reset_maintenance":
                        if error_manager.is_maintenance():
                            error_manager.reset()
                            with queue_lock:
                                global queue_head_since
                                qr_queue.clear()
                                queue_head_since = 0.0
                            
                            # (FIX L·ªñI ƒê·ªíNG B·ªò) C·∫≠p nh·∫≠t queue indices v√†o state
                            with state_lock:
                                system_state["queue_indices"] = []
                                
                            broadcast_log({"log_type": "success", "message": f"Ch·∫ø ƒë·ªô b·∫£o tr√¨ ƒë√£ ƒë∆∞·ª£c reset b·ªüi {client_label}. H√†ng ch·ªù ƒë√£ ƒë∆∞·ª£c x√≥a."})
                        else:
                            broadcast_log({"log_type": "info", "message": "H·ªá th·ªëng kh√¥ng ·ªü ch·∫ø ƒë·ªô b·∫£o tr√¨."})


                except json.JSONDecodeError:
                    pass
                except Exception as ws_loop_e:
                    logging.error(f"[WS] L·ªói x·ª≠ l√Ω message: {ws_loop_e}")

    except Exception as ws_conn_e:
        logging.warning(f"[WS] K·∫øt n·ªëi WebSocket b·ªã ƒë√≥ng ho·∫∑c l·ªói: {ws_conn_e}")
    finally:
        _remove_client(ws)
        logging.info(f"[WS] Client {client_label} disconnected. Total: {len(_list_clients())}")
# =============================
#     (M·ªöI) H√ÄM KH·ªûI ƒê·ªòNG THREAD
# =============================
def start_background_threads():
    """Kh·ªüi ƒë·ªông to√†n b·ªô lu·ªìng n·ªÅn."""
    logging.info("[SYSTEM] Starting all background threads...")
    threading.Thread(target=camera_capture_thread, name="CameraThread", daemon=True).start()
    threading.Thread(target=qr_detection_loop, name="QRThread", daemon=True).start()
    threading.Thread(target=sensor_monitoring_thread, name="SensorThread", daemon=True).start()
    threading.Thread(target=broadcast_state, name="BroadcastThread", daemon=True).start()
    threading.Thread(target=periodic_config_save, name="ConfigSaveThread", daemon=True).start()
        
# =============================
#             MAIN
# =============================
if __name__ == "__main__":
    try:
        # Setup logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] (%(threadName)s) %(message)s',
            handlers=[
                logging.FileHandler(LOG_FILE, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )

        load_local_config()

        with state_lock:
            loaded_gpio_mode = system_state.get("gpio_mode", "BCM")

        if isinstance(GPIO, RealGPIO):
            mode_to_set = GPIO.BCM if loaded_gpio_mode == "BCM" else GPIO.BOARD
            GPIO.setmode(mode_to_set)
            GPIO.setwarnings(False)
            logging.info(f"[GPIO] ƒê√£ ƒë·∫∑t ch·∫ø ƒë·ªô ch√¢n c·∫Øm l√†: {loaded_gpio_mode}")

            active_sensor_pins = [pin for pin in SENSOR_PINS if pin is not None]
            active_relay_pins = [pin for pin in RELAY_PINS if pin is not None]

            logging.info(f"[GPIO] Setup SENSOR pins: {active_sensor_pins}")
            for pin in active_sensor_pins:
                try:
                    GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
                except Exception as e:
                    logging.critical(f"[CRITICAL] L·ªói c·∫•u h√¨nh ch√¢n SENSOR {pin}: {e}. Ki·ªÉm tra l·∫°i GPIO Mode.")
                    error_manager.trigger_maintenance(f"L·ªói c·∫•u h√¨nh ch√¢n SENSOR {pin}: {e}")
                    raise
                

            logging.info(f"[GPIO] Setup RELAY pins: {active_relay_pins}")
            for pin in active_relay_pins:
                try:
                    GPIO.setup(pin, GPIO.OUT)
                except Exception as e:
                    logging.critical(f"[CRITICAL] L·ªói c·∫•u h√¨nh ch√¢n RELAY {pin}: {e}. Ki·ªÉm tra l·∫°i GPIO Mode.")
                    error_manager.trigger_maintenance(f"L·ªói c·∫•u h√¨nh ch√¢n RELAY {pin}: {e}")
                    raise

        else:
            logging.info("[GPIO] Ch·∫°y ·ªü ch·∫ø ƒë·ªô Mock, b·ªè qua setup v·∫≠t l√Ω.")


        reset_all_relays_to_default()

        # Kh·ªüi t·∫°o c√°c lu·ªìng (Thread)
        threading.Thread(target=camera_capture_thread, name="CameraThread", daemon=True).start()
        threading.Thread(target=qr_detection_loop, name="QRThread", daemon=True).start()
        threading.Thread(target=sensor_monitoring_thread, name="SensorThread", daemon=True).start()
        threading.Thread(target=broadcast_state, name="BroadcastThread", daemon=True).start()
       ## threading.Thread(target=auto_test_loop, name="AutoTestThread", daemon=True).start()
        threading.Thread(target=periodic_config_save, name="ConfigSaveThread", daemon=True).start()


        logging.info("=========================================")
        logging.info("  H·ªÜ TH·ªêNG PH√ÇN LO·∫†I S·∫¥N S√ÄNG (V1.7 - QR Standardized)")
        logging.info(f"  GPIO Mode: {'REAL' if isinstance(GPIO, RealGPIO) else 'MOCK'} (Config: {loaded_gpio_mode})")
        logging.info(f"  Log file: {LOG_FILE}")
        logging.info(f"  Sort log file: {SORT_LOG_FILE}")
        logging.info(f"  API State: http://<IP_CUA_PI>:5000/api/state")
        if AUTH_ENABLED:
            logging.info(f"  Truy c·∫≠p: http://<IP_CUA_PI>:5000 (User: {USERNAME} / Pass: {PASSWORD})")
        else:
            logging.info("  Truy c·∫≠p: http://<IP_CUA_PI>:5000 (kh√¥ng y√™u c·∫ßu ƒëƒÉng nh·∫≠p)")
        logging.info("=========================================")
        

        # Ch·∫°y Flask server
        app.run(host='0.0.0.0', port=5000)

    except KeyboardInterrupt:
        logging.info("\nüõë D·ª´ng h·ªá th·ªëng (Ctrl+C)...")
    except Exception as main_e:
        logging.critical(f"[CRITICAL] L·ªói kh·ªüi ƒë·ªông h·ªá th·ªëng: {main_e}", exc_info=True)
        try:
            if isinstance(GPIO, RealGPIO): GPIO.cleanup()
        except Exception: pass
    finally:
        main_loop_running = False
        logging.info("ƒêang t·∫Øt ThreadPoolExecutor...")
        executor.shutdown(wait=False)

        logging.info("ƒêang cleanup GPIO...")
        try:
            GPIO.cleanup()
            logging.info("‚úÖ GPIO cleaned up.")
        except Exception as clean_e:
            logging.warning(f"L·ªói khi cleanup GPIO: {clean_e}")

        logging.info("üëã T·∫°m bi·ªát!")

